import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

# Load the CSV file from the URL
url = "https://raw.githubusercontent.com/sytong12/SEEM3650project/refs/heads/main/aggregated_hourly_data.csv"
df = pd.read_csv(url)

# Aggregate data by road, date, and hour
road_grouped = df.groupby(['Road', 'Date', 'Hour']).agg({
    'Average_Speed': 'mean',
    'Average_Occupancy': 'mean',
    'Total_Volume': 'sum'
}).reset_index()

# Extract Kwun Tong Road Westbound data as the target (Y)
kwun_tong_west = road_grouped[road_grouped['Road'] == 'Kwun Tong Road Westbound'].copy()
kwun_tong_west['traffic_jam'] = kwun_tong_west['Average_Speed'] <= 50

# Extract nearby roads data as features (X)
nearby_roads = road_grouped[road_grouped['Road'] != 'Kwun Tong Road Westbound']

# Pivot nearby roads data into wide format
nearby_features = nearby_roads.pivot_table(
    index=['Date', 'Hour'],
    columns='Road',
    values=['Average_Speed', 'Average_Occupancy', 'Total_Volume'],
    aggfunc='first'
).reset_index()

# Flatten the MultiIndex columns
nearby_features.columns = ['_'.join(col).strip() for col in nearby_features.columns.values]

# Merge Kwun Tong Road Westbound target with nearby road features
kwun_tong_west = kwun_tong_west[['Date', 'Hour', 'traffic_jam']]
data = pd.merge(nearby_features, kwun_tong_west, on=['Date', 'Hour'], how='inner')

# Prepare features (X) and target (Y)
X = data.drop(columns=['Date', 'Hour', 'traffic_jam'])
Y = data['traffic_jam']

# Handle missing values by filling with column means
X = X.fillna(X.mean())

# Split the dataset into training and testing sets
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

# Train a logistic regression model
model = LogisticRegression(max_iter=1000)
model.fit(X_train, Y_train)

# Make predictions and evaluate the model
Y_pred = model.predict(X_test)
accuracy = accuracy_score(Y_test, Y_pred)
report = classification_report(Y_test, Y_pred)

# Print results
print(f"Accuracy: {accuracy}")
print("Classification Report:")
print(report)
